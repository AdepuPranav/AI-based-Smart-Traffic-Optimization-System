// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class DefaultFirebaseOptions {
  static bool _envLoaded = false;
  static void _ensureEnvLoaded() {
    if (!_envLoaded) {
      dotenv.isInitialized ? null : dotenv.load();
      _envLoaded = true;
    }
  }
  static FirebaseOptions get currentPlatform {
    _ensureEnvLoaded();
    if (kIsWeb) {
      return FirebaseOptions(
        apiKey: dotenv.env['FIREBASE_API_KEY_WEB']!,
        appId: dotenv.env['FIREBASE_APP_ID_WEB']!,
        messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_WEB']!,
        projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
        authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN_WEB'],
        storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
        measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID_WEB'],
        databaseURL: dotenv.env['FIREBASE_DATABASE_URL']!,
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return FirebaseOptions(
          apiKey: dotenv.env['FIREBASE_API_KEY_ANDROID']!,
          appId: dotenv.env['FIREBASE_APP_ID_ANDROID']!,
          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_ANDROID']!,
          projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
          databaseURL: dotenv.env['FIREBASE_DATABASE_URL']!,
        );
      case TargetPlatform.iOS:
        return FirebaseOptions(
          apiKey: dotenv.env['FIREBASE_API_KEY_IOS']!,
          appId: dotenv.env['FIREBASE_APP_ID_IOS']!,
          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_IOS']!,
          projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID']!,
          databaseURL: dotenv.env['FIREBASE_DATABASE_URL']!,
        );
      case TargetPlatform.macOS:
        return FirebaseOptions(
          apiKey: dotenv.env['FIREBASE_API_KEY_MACOS']!,
          appId: dotenv.env['FIREBASE_APP_ID_MACOS']!,
          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_MACOS']!,
          projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID']!,
          databaseURL: dotenv.env['FIREBASE_DATABASE_URL']!,
        );
      case TargetPlatform.windows:
        return FirebaseOptions(
          apiKey: dotenv.env['FIREBASE_API_KEY_WINDOWS']!,
          appId: dotenv.env['FIREBASE_APP_ID_WINDOWS']!,
          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_WINDOWS']!,
          projectId: dotenv.env['FIREBASE_PROJECT_ID']!,
          authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN_WINDOWS'],
          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET']!,
          measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID_WINDOWS'],
          databaseURL: dotenv.env['FIREBASE_DATABASE_URL']!,
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}